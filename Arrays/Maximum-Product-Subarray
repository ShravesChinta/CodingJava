/***
Given an integer array nums, find a 
subarray
 that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.



Intution: Since we have to find the contiguous subarray having maximum product then your approach should be combination of following three cases :

Case1 :- All the elements are positive : Then your answer will be product of all the elements in the array.

Case2 :- Array have positive and negative elements both :
If the number of negative elements is even then again your answer will be complete array because on multiplying all the negative numbers it will become positive.

If the number of negative elements is odd then you have to remove just one negative element and for that u need to check your subarrays to get the max product.

Case3 :- Array also contains 0 : Then there will be not much difference...its just that your array will be divided into subarray around that 0. What u have to so 
is just as soon as your product becomes 0 make it 1 for the next iteration, now u will be searching new subarray and previous max will already be updated.

Solution : 
We would be using prefix and suffix method. 

***/

class Solution {
    public int maxProduct(int[] nums) {
    int product=1;
    int max_product=Integer.MIN_VALUE;
    for(int a:nums)
    {
        product=product*a;
        max_product=Math.max(max_product,product);
        if(product==0)
        {
            product=1;
        }
    }  
    product=1;

    for(int i=nums.length-1;i>=0;i--)
    {
    product=product*nums[i];
    max_product=Math.max(max_product,product);
        if(product==0)
        {
            product=1;
        }

    } 
    return max_product;
    }
}
