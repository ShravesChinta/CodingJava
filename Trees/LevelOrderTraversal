/***

Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []

***/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
       Queue<TreeNode> q=new LinkedList<>();
       List<List<Integer>> result=new ArrayList<>();

       if(root==null)
       return result;
       q.add(root);
       while(q.size()!=0)
       {
           int size_q=q.size();
           List<Integer> l=new ArrayList<>();
           for(int i=0;i<size_q;i++)
           {
            TreeNode visited=q.remove();
            l.add(visited.val);
            if(visited.left!=null)
            q.add(visited.left);

            if(visited.right!=null)
            q.add(visited.right);
       } 
       result.add(l);
       }
       return result;
    }
}
