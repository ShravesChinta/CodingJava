
/** This question can be solved in two ways:

1) Using iterative method- bfs level order traversal method
2) Recursive way

This is using bfs method

Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 3
Example 2:

Input: root = [1,null,2]
Output: 2

* Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 
 ***/
 
 class Solution {
    public int maxDepth(TreeNode root) {
        int maxdepth=0;
        Queue<TreeNode> q=new LinkedList<>();
        if(root==null)
        return maxdepth;
        q.add(root);
        while(q.size()!=0)
        {
            int sizeq=q.size();
            maxdepth++;
            for(int i=0;i<sizeq;i++)
            {
                TreeNode visited=q.remove();
                if(visited.left!=null)
                q.add(visited.left);

                if(visited.right!=null)
                q.add(visited.right);
            }
        }
        return maxdepth;
    }
}
